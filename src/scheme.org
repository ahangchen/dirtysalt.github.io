#+title: scheme
- http://www.scheme.com/
- SICP http://mitpress.mit.edu/sicp/
- TSPL http://www.scheme.com/tspl4/
- Daniel P. Friedman http://www.cs.indiana.edu/~dfried/
- [[ftp://ftp.cs.utexas.edu/pub/garbage/cs345/schintro-v14/schintro_toc.html][An Introduction to Scheme and its Implementation]]

-----
Church Counter(邱奇计数)

#+BEGIN_SRC scheme
(define zero (lambda (f) (lambda (x) x)))
(define (add-1 n) (lambda (f) (lambda (x) (f ((n f) x)))))
#+END_SRC

我们把zero带入add-1
#+BEGIN_EXAMPLE
(lambda (f) (lambda (x) (f ((lambda (f) (lambda (x) x)) f) x)))
 => (lambda (f) (lambda (x) (f ((lambda (x) x) x))))
 => (lambda (f) (lambda (x) (f x)))
#+END_EXAMPLE
这个时候我们可以和zero比较，就会发现里面多了一次f操作，这就是计数操作

one, two可以写为
#+BEGIN_SRC scheme
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))
#+END_SRC

(add m n)可以写为
#+BEGIN_SRC scheme
(define (add m n) (lambda (f) (lambda (x) ((m f) ((n f) x)))))
#+END_SRC
